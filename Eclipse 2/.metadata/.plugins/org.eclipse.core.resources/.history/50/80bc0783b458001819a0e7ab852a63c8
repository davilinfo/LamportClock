package LamportClock;

import java.io.IOException;
import java.net.Socket;

public class ServerSocket extends java.net.ServerSocket {
	int id;
	Socket clientSocket;
	static int timeValue;
	static Socket sendSocket;
	
	public ServerSocket(int port) throws IOException {
		super(port);
		//id de classe
		id = 1;
		//valor inicial
		timeValue = 0;
	}
	
	public String GetLamportValue(Socket socket) throws IOException, InterruptedException{
		
		clientSocket = socket;
		
		clientSocket.getInputStream().wait();
		
		int outerSocketTimeValue = clientSocket.getInputStream().read();
		timeValue = timeValue > outerSocketTimeValue ? timeValue + 1 : outerSocketTimeValue;
		return Integer.toString(timeValue);
	}
	
	public static String SetNewLocalEventValue() throws InterruptedException{
		
		//Realiza alguma atividade e incrementa valor de tempo
		Thread.sleep(1000);
		
		timeValue += timeValue + 1;
		
		return Integer.toString(timeValue);
	}
	
	public static String SetNewEventValue(){
		
		timeValue += timeValue + 1;
		
		return Integer.toString(timeValue);
	}
	
	public static void main(String[] args) throws IOException, InterruptedException {

		ServerSocket serverSocket2 = new ServerSocket(5800);
		
		//evento 1. Local e informa valor de Lamport
		String serverSocket1LamportValue = SetNewLocalEventValue();
		System.out.println( serverSocket1LamportValue);
		
		//evento 2 
		sendSocket = new Socket("localhost", 5700);
		SetNewEventValue();
		sendSocket.getOutputStream().write(timeValue);
		System.out.println(timeValue);
		
		//evento 3. Recebe msg de outro socket e informa valor de Lamport
		serverSocket1LamportValue = serverSocket2.GetLamportValue(serverSocket2.accept());
		System.out.println(serverSocket1LamportValue);
		
		serverSocket2.close();
	}

}

